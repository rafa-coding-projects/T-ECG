% transformSig.m
%
% transformSig(base_sig, candidate_sig, T) for ECG signals
%   This functions transforms candidate_sig to base_sig. The reference
%   signal, base_sig, is verified for each window within RR peaks. The size
%   of candidate_sig and T are equated to the size of current window of
%   base_sig and then the trasnformation is done. The same procedure is
%   made for each window of base_sig.
% 
% Inputs:
%   base_sig - signal of reference
%   candidate_sig -  signal to be transformed
%   T - transformation signal (generated by genTransform.m)
%
% Outputs:
%   transformedSig - Approximation of candidate_sig to base_sig
%
% Date: Mar. 31st, 2020
% Author: Rafael L. da Silva
function transformedSig = transformSig(base_sig, candidate_sig, T, pk_base,pk_cand)

    [pks_base, locs_base] = findpeaks(base_sig,'MinPeakHeight',pk_base);
    [pks_cand, locs_cand] = findpeaks(candidate_sig,'MinPeakHeight', pk_cand);
    fprintf('Peaks in baseline: %d\n', size(pks_base,1));
    fprintf('Peaks in candidate: %d\n', size(pks_cand,1));
    if length(pks_base) ~= length(pks_cand)
        warning('Signals had different number of peaks detected!!')
        % Use smaller number of peaks as reference
        pks_base = pks_base(1:min(size(pks_base,1),size(pks_cand,1)),1);
        pks_cand = pks_cand(1:min(size(pks_base,1),size(pks_cand,1)),1);
    end   
    transformedSig = zeros(size(base_sig));
    tmpCand = zeros(size(T));
    tmpBase = zeros(size(T));
    tmpT = zeros(size(T));
    sizeT = length(T);
    for k=2:length(pks_base)
        % Baseline window
        baseline = size(base_sig(locs_base(k-1):locs_base(k)),1);
        
        % Resample LA
        if size(candidate_sig(locs_cand(k-1):locs_cand(k)),1) > baseline
            tmpCand = reduce_signal(candidate_sig(locs_cand(k-1):locs_cand(k)),baseline);
        elseif size(candidate_sig(locs_cand(k-1):locs_cand(k)),1) < baseline
            tmpCand = increase_signal(candidate_sig(locs_cand(k-1):locs_cand(k)),baseline);
        else
            tmpCand = candidate_sig(locs_cand(k-1):locs_cand(k),1);
        end
        % Resample T
        if sizeT > baseline
            tmpT = reduce_signal(T,baseline);
        elseif sizeT < baseline
            tmpT = increase_signal(T,baseline);
        else
            tmpT = T;
        end
        % Transform LA for given window
        transformedSig(locs_base(k-1):locs_base(k),1) = diag(tmpT)*tmpCand;
    end
end

function sig = reduce_signal(sig,baseline)
    % length(sig) > baseline
    sig = resample(sig,baseline,length(sig));
end

function sig = increase_signal(sig,baseline)
    % length(sig) < baseline
    sig = resample(sig,baseline,length(sig));
end
        